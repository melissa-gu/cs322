
// Programmer: Arthur Charlesworth  (c) Copyright 2018
// Additional Authors: SEALS (Jessica, Melissa, Tracy, Will)
// *****************************************************************************
// *****************************************************************************
// **** TrafficTesterView
// *****************************************************************************
// *****************************************************************************
 

// NOTE: A segment has same coordinates as intersection the segment aims at.
//   Throughout the rest of the semester, make sure that
//   intersections of a grid are processed in exactly the following order:
//     row 1 intersections, from left to right
//     row 2 intersections, from left to right, etc, for all rows.
//   In an actual simulation, that process should be repeated (in that specific
//   order) as many times as necessary for the desired length of the simulation.
//   But, for simplicity, the initial tester software students build should
//   only show the first iteration of the above process, that is, only one
//   processing of each of the intersections.
//
//   The format of the data to be used with the program in this file
//   is shown, via an example, at the end of this file.
 
import java.util.*;

public class TrafficTesterView {

// NOTE: Just to keep the current tester program really simple,
// the following constants are not encapsulated within two classes, Direction
// and Turn, according to appropriate Information Hiding:
  static final int SOUTHWARD = 0;
  static final int EASTWARD = 1;
  static final int NORTHWARD = 2;
  static final int WESTWARD = 3;
  static final int NEVER_TURN = 0;
  static final int TURN_RIGHTWARD = 1;
  static final int TURN_LEFTWARD = -1;

  public static void main(String[] args) {
    Scanner console = new Scanner(System.in);
    console.nextLine();
    int numIntersectionsInOneDirection = console.nextInt();
    System.out.print("The number of intersections in one direction ");
    System.out.println("is: " + numIntersectionsInOneDirection);
    console.nextLine();
    console.nextLine();
    int numberOfCars = console.nextInt();
    System.out.println("The number of cars is: " + numberOfCars);
    Simulation simulation = new Simulation(numIntersectionsInOneDirection);
    int carID;
    int row;
    int col;
    int segmentDirectionCode;
    int numBlocksBeforeTurning;
    int turnDirectionCode;
    for (int i = 1; i <= numberOfCars; i++) {
      console.nextLine();
      console.nextLine();
      carID = console.nextInt();
      System.out.println("Car #" + carID);
      console.nextLine();
      console.nextLine();
      col = console.nextInt();
      console.nextLine();
      console.nextLine();
      row = console.nextInt();
      console.nextLine();
      console.nextLine();
      segmentDirectionCode = console.nextInt();
      console.nextLine();
      console.nextLine();
      numBlocksBeforeTurning = console.nextInt();
      console.nextLine();
      console.nextLine();
      turnDirectionCode = console.nextInt();
      Simulation.insertCar(carID, col, row, segmentDirectionCode, 
                           numBlocksBeforeTurning, turnDirectionCode);
      System.out.println("  is born in the segment located at col " + col +
                         " and row " + row + ", that aims " +
                         convertToSegmentDirection(segmentDirectionCode) + ",");
      System.out.println("  and has " + numBlocksBeforeTurning +
                         " block(s) to go before turning");
      System.out.println("  and plans to " +
                         convertToTurnDirection(turnDirectionCode));
    } // end for
  } // main


  public static String convertToSegmentDirection(int segmentDirectionCode) {
    if (segmentDirectionCode == NORTHWARD)      return "NORTHWARD";
    if (segmentDirectionCode == WESTWARD)       return "WESTWARD";
    if (segmentDirectionCode == SOUTHWARD)      return "SOUTHWARD";
    if (segmentDirectionCode == EASTWARD)       return "EASTWARD";
    return "ILLEGAL segmentDirectionCode!!!";
  } // convertToSegmentDirection

 
  public static String convertToTurnDirection(int turnDirectionCode) {
    if (turnDirectionCode == NEVER_TURN)     return "NEVER_TURN";
    if (turnDirectionCode == TURN_RIGHTWARD) return "TURN_RIGHTWARD";
    if (turnDirectionCode == TURN_LEFTWARD)  return "TURN_LEFTWARD";
    return "ILLEGAL turnDirectionCode!!!";
  } // convertToTurnDirection


} // TrafficTesterView

 

////////////////// Example of sample use of the above program //////////////////
// except for the fact that all the following lines have been made comments,  //
// and also the actual phrase "additional blocks to travel" in the data       //
// shown below has been shortened to the phrase "additional blocks" to fit    //
// the lines below into the required 80-columns per line.                     //
////////////////////////////////////////////////////////////////////////////////
//numIntersectionsInOneDirection:
//1
//number of cars created for the test:
//2
//car number:
//1
//born in the segment that is positioned at col:
//1
//born in the segment that is positioned at row:
//1
//born in the segment that is oriented in direction:
//0
//additional blocks prior to turning (-1 means the car will never turn):
//0
//direction the car will turn, when the car turns:
//1
//car number:
//2
//born in the segment that is positioned at col:
//1
//born in the segment that is positioned at row:
//1
//born in the segment that is oriented in direction:
//3
//additional blocks prior to turning (-1 means the car will never turn):
//-1
//direction the car will turn, when the car turns:
//0
//hopper2{acharles}2484: java TrafficTesterView < data1_for_TrafficTesterView
//The number of intersections in one direction is: 1
//The number of cars is: 2
//Car #1
//  is born in the segment located at col 1 and row 1, that aims SOUTHWARD,
//  and has 0 block(s) to go before turning
//  and plans to TURN_RIGHTWARD
//Car #2
//  is born in the segment located at col 1 and row 1, that aims WESTWARD,
//  and has -1 block(s) to go before turning
//  and plans to NEVER_TURN


////////////////// Example of sample use of the above program //////////////////
// except for the fact that all the following lines have been made comments,  //
// and also the actual phrase "additional blocks to travel" in the data       //
// shown below has been shortened to the phrase "additional blocks" to fit    //
// the lines below into the required 80-columns per line.                     //
////////////////////////////////////////////////////////////////////////////////
//numIntersectionsInOneDirection:
//1
//number of cars created for the test:
//2
//car number:
//1
//born in the segment that is positioned at col:
//1
//born in the segment that is positioned at row:
//1
//born in the segment that is oriented in direction:
//0
//additional blocks prior to turning (-1 means the car will never turn):
//0
//direction the car will turn, when the car turns:
//1
//car number:
//2
//born in the segment that is positioned at col:
//1
//born in the segment that is positioned at row:
//1
//born in the segment that is oriented in direction:
//3
//additional blocks prior to turning (-1 means the car will never turn):
//-1
//direction the car will turn, when the car turns:
//0
//hopper2{acharles}2484: java TrafficTesterView < data1_for_TrafficTesterView
//The number of intersections in one direction is: 1
//The number of cars is: 2
//Car #1
//  is born in the segment located at col 1 and row 1, that aims SOUTHWARD,
//  and has 0 block(s) to go before turning
//  and plans to TURN_RIGHTWARD
//Car #2
//  is born in the segment located at col 1 and row 1, that aims WESTWARD,
//  and has -1 block(s) to go before turning
//  and plans to NEVER_TURN



// Authors: SEALS (Jessica, Melissa, Tracy, Will)

// *****************************************************************************
// *****************************************************************************
// **** Simulation
// *****************************************************************************
// *****************************************************************************

import java.util.*;

public class Simulation {
  private int numIntersectionsInOneDirection;
  private double sumOfAllCarTimesToExit;
  private int numCarsExited;
  private Grid grid;
  private ArrayList<Car> cars;
  private ArrayList<Car> exitedCars;
  
  public Simulation(int numIntersectionsInOneDirection) {
    System.out.println("Num Intersection: " + numIntersectionsInOneDirection);
    this.numIntersectionsInOneDirection = numIntersectionsInOneDirection;
    grid = new Grid(numIntersectionsInOneDirection);
    cars = new ArrayList<Car>();
    exitedCars = new ArrayList<Car>();
  } // End of constructor Simulation()


  public void update() {
      grid.update();
      for (Car car : cars) {
        car.update();
        // If car is exiting the grid
        if (car.hasLeftGrid()) {
          car.appendToSummary("car#" + car.getId() + " has left the grid");
          cars.remove(car);
          exitedCars.add(car);
          numCarsExited++;
          double timeToExit = car.getExitTime() - car.getEntryTime();
          sumOfAllCarTimesToExit += timeToExit;
      }
    }
  } // end of update ()


  public void insertCar(int carID, int col, int row, int segmentDirectionCode, 
                        int numBlocksBeforeTurning, int turnDirectionCode) {
    Intersection intersectionReference = grid.getIntersection(row, col);
    Car car = new Car(carID, segmentDirectionCode, turnDirectionCode,
      numBlocksBeforeTurning, intersectionReference);
    cars.add(car);
  } // end of insertCar()


  public String toString() {
    return grid.toString();
  } // end of toString()


  // prints average time cars took to exit the grid
  public String getAverage() {
    String result = "";
    result += "The average time cars took to exit the grid was ";
    result += sumOfAllCarTimesToExit/numCarsExited;
    result += " simulated time-steps";
    return result;
  }
}



// Authors: SEALS (Jessica, Melissa, Tracy, Will)

// *****************************************************************************
// *****************************************************************************
// **** Grid
// *****************************************************************************
// *****************************************************************************


// Converting from grid coordinates to Intersection coordinates:
// row and col are iterators from 1 to numIntersections inclusive.
// grid[i,j] = grid[row - 1][col - 1]
//           = Intersection(row: numIntersections - row + 1, col)

// Converting from intersection coordinates to grid coordinates:
// grid[i,j] = (numIntersections - intersection[row], intersection[col] - 1)

// grid[i, j] = grid[row - 1][col - 1] are for "for loops"
// and (row, col) = (numIntersections - intersection[row] + 1, 
//                  intersection[col])
// grid[i, j] = 
public class Grid {
  private int numIntersections;
  // The 2D representations of intersections.
  private Intersection[][] grid;
  private IntersectionController[] intersectionControllers;


  public Intersection getIntersection(int row, int col) {
    return grid[numIntersections - row][col - 1];
  } // end of getIntersection()


  // Constructor
  // @param numIntersections: the number of intersections in one direction.
  public Grid (int numIntersections) {
    this.numIntersections = numIntersections;
    grid = new Intersection[numIntersections][numIntersections];
    intersectionControllers = 
      new IntersectionController[numIntersections * numIntersections];

    // Construct instances of intersection and populate the grid.
    int intersection_id = numIntersections * numIntersections;
    for (int row = 1; row <= numIntersections; row++) {
      for (int col = 1; col <= numIntersections; col++) {
        Intersection intersection = new Intersection(intersection_id,
          numIntersections - row + 1, col);
        grid[row - 1][col - 1] = intersection;

        // Construct a corresponding intersection controller.
        intersectionControllers[intersection_id - 1] = 
          new IntersectionController(intersection);
        intersection_id--;
      }
    } // end of for (each row and column of grid)

    connectIntersections();
  } // end of Grid()


  private void connectIntersections() {
    for (int row = 1; row <= numIntersections; row++) {
      for (int col = 1; col <= numIntersections; col ++) {
        Intersection intersection = grid[row-1][col-1];
        Intersection[] nextIntersections = new Intersection[4];
        // Southward next intersection
        if (row + 1 <= numIntersections) {
          nextIntersections[0] = grid[row][col - 1];
        } else {
          nextIntersections[0] = null;
        }

        // Eastward next intersection
        if (col - 1 >= 1) {
          nextIntersections[1] = grid[row - 1][col - 2];
        } else {
          nextIntersections[1] = null;
        }

        // Northward next intersection
        if (row - 1 >= 1) {
          nextIntersections[2] = grid[row - 2][col - 1];
        } else {
          nextIntersections[2] = null;
        }

        // Westward next intersection
        if (col + 1 <= numIntersections) {
          nextIntersections[3] = grid[row - 1][col];
        } else {
          nextIntersections[3] = null;
        }

        intersection.setNextIntersections(nextIntersections);
      }
    } // end of for (each row and column of grid)
  } // end of connectIntersections()


  public void update() {
    for (IntersectionController controller : intersectionControllers) {
      controller.update();
    } // end of for (each controller in intersectionControllers)
  } // end of update()
  

  public String toString() {
    String summary = "";
    // Intersections are processed in the order of  
    // row 1 intersections, from left to right
    // row 2 intersections, from left to right, etc, for all rows.
    // but row i corresponds to row [num_intersections - i] of the grid.
    // and col i corresponds to col [i - 1] of the grid.
    int rowNumber = 1;
    for (int row = numIntersections - rowNumber; row >= 0; row--) {
      for (int col = 1; col <= numIntersections; col++) {
        Intersection intersection = grid[row][col - 1];
        summary += intersection.toString();
      }
    } // end of for (each intersection in grid)
    return summary;
  } // end of toString()
}



// Authors: SEALS (Jessica, Melissa, Tracy, Will)

// *****************************************************************************
// *****************************************************************************
// **** IntersectionController
// *****************************************************************************
// *****************************************************************************

import java.util.*;

public class IntersectionController {

  private Intersection myIntersection;
  private ArrayList<Car> cars;

  // Constructor
  public IntersectionController(Intersection intersection) {
    myIntersection = intersection;
  }

  public void update() {
    // Check whether no car is traveling within the 2x2 grid of the intersection
    boolean empty = myIntersection.intersectionIsEmpty();
    cars = myIntersection.getApproachingCars();

    if (empty) {
      for (Car car : cars) {
        // Decide which car can move into intersection based on:
        // 1. priority of the car instance's turning direction, specified in
        //  Requirements Doc
        // 2. whether the car's timeLeftInSegment has reached 0
        //   (already checked in intersection.getApproachingCars())
        // 3. Whether the outgoing segment is full.
        if (canMoveBasedOnRequirementsDoc(car) &&
          !myIntersection.nextSegmentIsFull(car) ) {
            myIntersection.moveCarIntoIntersection(car);
          }
        }
    } else {
      myIntersection.updateIntersectionGrid();
    }     
  }
  

  private boolean canMoveBasedOnRequirementsDoc(Car curCar) {
    return true;
  }

}


// Authors: SEALS (Jessica, Melissa, Tracy, Will)

// *****************************************************************************
// *****************************************************************************
// **** Intersection
// *****************************************************************************
// *****************************************************************************

import java.util.*;

public class Intersection {
  // id identifies which intersection this Intersection instance is.
  private int id;

  // row and column of this intersection instance in the grid.
  private int row;
  private int col;

  // Queues representing the four ingoing segments. The int values of the
  // direction code for S, E, N, W - (0,1,2,3) respectively - correspond to the
  // indices of this array of Queue.
  private ArrayList<PriorityQueue<Car>> ingoingSegments = 
    new ArrayList<PriorityQueue<Car>>();

  // Four next intersections of this intersection. The int values of the
  // direction code for S, E, N, W - (0,1,2,3) respectively - correspond to the
  // indices of this array of Intersection instances.
  private Intersection[] nextIntersections;

  // 2x2 intersection grids of the NW, NE, SE, SW in clockwise order.
  private Car[][] intersectionGrid;

  // Setters and getters
  public int getId() {
    return id;
  } // end of getId()


  public void setNextIntersections(Intersection[] nextIntersections) {
    this.nextIntersections = nextIntersections;
  } // end of setNextIntersections()


  // Constructor
  public Intersection(int id, int row, int col) {
    this.id = id;
    this.row = row;
    this.col = col;

    for (int i = 0; i < 4; i++) {
      PriorityQueue<Car> segment = new PriorityQueue<Car>();
      ingoingSegments.add(segment);
    }

    intializeIntersectionGrid();
  } // end of Intersection() constructor


  private void intializeIntersectionGrid() {
    intersectionGrid = new Car[2][2];
    for (int row = 0; row < intersectionGrid.length; row ++) {
      for (int col = 0; col < intersectionGrid[0].length; col++) {
        intersectionGrid[row][col] = null;
      }
    } // end of for (row, col in intersectionGrid)
  } // end of initializeIntersectionGrid()


  public boolean intersectionIsEmpty() {
    for (int row = 0; row < intersectionGrid.length; row ++) {
      for (int col = 0; col < intersectionGrid[0].length; col++) {
        if (intersectionGrid[row][col] != null) {
          return false;
        }
      }
    } // end of for (row, col in intersectionGrid)
    return true;
  } // end of intersectionIsEmpty()


  public ArrayList<Car> getApproachingCars() {
    // Check the 4 queues that represent the ingoing segments, and only add
    // cars that are the first to be in the queue (FIFO) AND has finished
    // traversing the segments (timeLeftInSegment = 0).
    ArrayList<Car> approachingCars = new ArrayList<Car>();
    for (Queue<Car> segment : ingoingSegments) {
      Car potentialCar = segment.peek();
      if (potentialCar == null) continue;
      // temporarily not checking for whether Car's timeToTraverseSegment is 0.
      approachingCars.add(potentialCar);
    } // end of for (segment in ingoingSegments)
    return approachingCars;
  } // end of getApproachingCars()


  public boolean nextSegmentIsFull(Car car) {
    int nextDirection = calculateNextDirection(car.getDirection(),
      car.getTurningDirection());
    Intersection nextIntersection = nextIntersections[nextDirection];
    return nextIntersection.checkIfQueueIsFull(nextDirection);
  } // end of nextSegmentIsFull()


  private boolean checkIfQueueIsFull(int nextDirection) {
    return false; // temporarily
  } // end of checkIfQueueuIsFull()


  private int calculateNextDirection(int carDirection, int carTurningCode) {
    switch(carDirection) {
      case 0:
        if (carTurningCode == 1) {
          return 3;
        } else if (carTurningCode == -1) {
          return 1;
        }
        return 0;
      case 1:
        if (carTurningCode == 1) {
          return 0;
        } else if (carTurningCode == -1) {
          return 2;
        }
        return 1;
      case 2:
        if (carTurningCode == 1) {
          return 1;
        } else if (carTurningCode == -1) {
          return 3;
        }
        return 2;
      case 3:
        if (carTurningCode == 1) {
          return 2;
        } else if (carTurningCode == -1) {
          return 0;
        }
        return 3;
    }
    return -1;
  } // end of calculateNextDirection()


  public void moveCarIntoIntersection(Car car) {
    PriorityQueue<Car> segment = ingoingSegments.get(car.getDirection());
    Car carToDequeue = segment.poll();
    if (carToDequeue != car) {
      // throw error
    }

    switch (car.getDirection()) {
      case 0:
        intersectionGrid[0][0] = car;
        break;
      case 1:
        intersectionGrid[1][0] = car;
        break;
      case 2:
        intersectionGrid[1][1] = car;
        break;
      case 3:
        intersectionGrid[0][1] = car;
        break;
    }
     
    if (car.getTurningDirection() == 1) {
      car.setDirection(calculateNextDirection(car.getDirection(),
        car.getTurningDirection()));
    } // end of if (car.getTurningDirection() == 1)
  } // end of moveCarIntoIntersection()


  public void updateIntersectionGrid() {
    // Check the NW slot
    if (intersectionGrid[0][0] != null) {
      Car car = intersectionGrid[0][0];
      updateNWSlot(car);
    } 

    if (intersectionGrid[0][1] != null) {
      Car car = intersectionGrid[0][1];
      updateNESlot(car);
    } 

    if (intersectionGrid[1][0] != null) {
      Car car = intersectionGrid[1][0];
      updateSWSlot(car);
    } 

    if (intersectionGrid[1][1] != null) {
      Car car = intersectionGrid[1][1];
      updateSESlot(car);
    } 
  } // end of updateIntersectionGrid ()


  private void resetCarDirIfTurningLeft(Car car) {
    if (car.getTurningDirection() == -1) {
      car.setDirection(calculateNextDirection(car.getDirection(),
        car.getTurningDirection()));
      car.setTurningDirection(0);
    }
  } // end of resetCarDirIfTurningLeft()


  private void updateNWSlot(Car car) {
    intersectionGrid[0][0] = null;
    switch(car.getDirection()) {
      case 0:
        intersectionGrid[1][0] = car;
        break;
      case 1:
        intersectionGrid[0][1] = car;
        break;
      default:
        Intersection nextIntersection = nextIntersections[car.getDirection()];
        car.moveToNextIntersection(nextIntersection);
        break;
    }
    resetCarDirIfTurningLeft(car);
  } // end of updateNWSlot()


  private void updateSWSlot(Car car) {
    intersectionGrid[1][0] = null;
    switch(car.getDirection()) {
      case 1:
        intersectionGrid[1][1] = car;
        break;
      case 2:
        intersectionGrid[0][0] = car;
        break;
      default:
        Intersection nextIntersection = nextIntersections[car.getDirection()];
        car.moveToNextIntersection(nextIntersection);
        break;
    }
    resetCarDirIfTurningLeft(car);
  } // end of updateSWSlot()


  private void updateNESlot(Car car) {
    intersectionGrid[0][1] = null;
    switch(car.getDirection()) {
      case 0:
        intersectionGrid[1][1] = car;
        break;
      case 3:
        intersectionGrid[0][0] = car;
        break;
      default:
        Intersection nextIntersection = nextIntersections[car.getDirection()];
        car.moveToNextIntersection(nextIntersection);
        break;
    }
    resetCarDirIfTurningLeft(car);
  } // end of updateNESlot()


  private void updateSESlot(Car car) {
    intersectionGrid[1][1] = null;
    switch(car.getDirection()) {
      case 2:
        intersectionGrid[0][1] = car;
        break;
      case 3:
        intersectionGrid[1][0] = car;
        break;
      default:
        Intersection nextIntersection = nextIntersections[car.getDirection()];
        car.moveToNextIntersection(nextIntersection);
        break;
    }
    resetCarDirIfTurningLeft(car);
  } // end of updateSESlot()


  public void addCarToQueue(Car car) {
    ingoingSegments.get(car.getDirection()).add(car);
  } // end of addCarToQueue ()

  // Returns summary of the intersection queues and cars
  public String toString() {
    String summary = "";

    for (int i = 0; i < ingoingSegments.size(); i++) {
      String direction = "";

      switch(i) {
        case 0:
          direction = "SOUTHWARD";
          break;
        case 1:
          direction = "EASTWARD";
          break;
        case 2:
          direction = "NORTHWARD";
          break;
        case 3:
          direction = "WESTWARD";
          break;
      }
      if (ingoingSegments.get(i).size() == 0) {
        summary += ("incoming lane having direction " + direction + 
          " is empty");
      } else {
        summary += ("incoming lane having direction " + direction + 
          " is nonempty");
      }

      for (Car car : ingoingSegments.get(i)) {
        summary += (car.toString());
      }
    }

    return summary;
  } // end of toString()

}

