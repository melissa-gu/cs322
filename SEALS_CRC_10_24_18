

Authors: SEALS (Jessica, Melissa, Tracy, Will)

         1         2         3         4         5         6         7         8
12345678901234567890123456789012345678901234567890123456789012345678901234567890

The class name: Setup
Responsibility:
1. Read user input from a file or the command-line
2. Construct an instance of simulation based on the input
3. Run the simulation
Collaboration:
1. Simulation Class

The class name: Simulation
Responsibility:
1. Send message to grid to initialize instance of grid class with number of 
   intersections based on constructor parameters
2. Send message to instance of grid to update positions of cars
3. Calculate and output the average time each instance of car takes to enter and 
   exit the grid based on the messages received from grid instance
Collaboration:
1. Grid Class

The class name: Grid
Responsibility:
1. Receive message from simulation about number of intersections
2. Initialize 2D array of intersection instances, sending message to each 
   instance with an integer representing the intersection
3. Initialize instance of traffic controller
Collaboration:
1. Simulation Class
2. Intersection Class
3. TrafficController Class

The class name: Intersection
Responsibility:
1. Receive message from grid containing information about intersection ID, 
   intialize intersection ID
2. Initialize 2D integer array of size 4 representing the four slots within an 
   intersection that contains integer car IDs
3. Initialize four integer queues corresponding to four directions that contain 
   integer car IDs. Each queue represents cars occupying the segment 
   that aims towards the intersection with remaining time values equal to 
   zero
4. Initialize four integer instance variables containing the remaining capacity
   of each of the four segments
5. Receive message from car instances about direction car will proceed through 
   intersection
6. Receive message from traffic controller to dequeue cars that can move 
   into intersection 
7. Update the 2D array to reflect the movement of cars
8. Receive messages from car instances about which queue to enqueue the car 
   into, enqueue that car
Collaboration:
1. Grid Class
2. TrafficController Class

The class name: Car
Responsibility:
1. Receive message from simulation to initialize the following variables:
   1.1 Integer ID representing the car
   1.2 Integer representing the coordinate of the segment or intersection the 
       car
   1.3 Initialize integer representing time left in a segment, 
       timeLeftInSegment, with the intial value of timeToTraverseSegment
2. Receive message from simulation at each time unit to decrement 
   timeLeftInSegment value at each time unit
3. Receive message from traffic controller about which queue car should enter
4. When timeLeftInSegment first becomes 0, send message to instance of 
   intersection coresponding to the car's intersection ID to enqueue the car in 
   the correct queue
Collaboration:
1. Simulation Class
2. Intersection Class


The class name: TrafficController
Responsibility:
1. Receive message from intersection containing information about which 
   slots of the 2D array are occupied
2. Receive message from intersection containing information about cars 
   approaching the intersection
3. Determine which car(s) approaching intersection can move based on rules
   specified in Requirements document
4. Send message to intersection to dequeue cars that can move into intersection 
   and update the 2D array
5. Send messages to cars about which queue they should enter
Collaboration:
1. Intersection Class
2. Car Class