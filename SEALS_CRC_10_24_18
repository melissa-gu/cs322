

Authors: SEALS (Jessica, Melissa, Tracy, Will)

         1         2         3         4         5         6         7         8
12345678901234567890123456789012345678901234567890123456789012345678901234567890

The class name: Setup
Responsibility:
1. Read user input from a file or the command-line
2. Construct an instance of simulation based on the input
3. Run the simulation
Collaboration:
1. Simulation Class

The class name: Simulation
Responsibility:
1. Send message to grid to initialize instance of grid class with number of 
   intersections based on constructor parameters
2. Send message to instance of grid to update positions of cars
3. Calculate and output the average time each instance of car takes to enter and 
   exit the grid based on the messages received from grid instance
Collaboration:
1. Grid Class

The class name: Grid
Responsibility:
1. Initialize 2D array of intersection instances according to message received 
   from simulation
2. 

Collaboration:
1. Intersection class
2. TrafficController class


The class name: TrafficController
Responsibility:
1. Receive message from grid containing an instance of intersection
2. Receive message from intersection containing information about which 
   slots of the 2D array are occupied
3. Receive message from intersection containing information about cars 
   approaching the intersection
3. Determine which car(s) approaching intersection can move
4. Send message to intersection to dequeue cars that can move into intersection 
   and update the 2D array
5. Send messages to cars about which queue they should enter
Collaboration:
1. Intersection Class
2. Car Class

The class name: Car
Responsibility:
1. Initialize integer ID representing the car
2. Initialize integer representing the intersection it is aiming towards or 
   in   
3. Initialize integer representing time left in a segment with the intial value 
   of timeToTraverseSegment
4. 
Collaboration:

2. TrafficController Class

The class name: Intersection
Responsibility:
1. Receive message from grid containing information about ID, intialize 
   intersection ID
2. Initialize 2D integer array of size 4 containing car IDs (or -1 if no 
   car is present)
2. Initialize four integer queues corresponding to four directions that contain 
   integer car IDs. Each queue represents cars occupying the segment 
   that aims towards the intersection with remaining time values equal to 
   zero
3. Receive message from TrafficController class to dequeue cars that can move 
   into intersection 
4. Receive message from car instance about direction car will proceed through 
   intersection to update the 2D array
5. Receive message from car instance about which queue to enqueue the car into, 
   enqueue that car
7. Initialize four integer instance variables containing the remaining capacity
   of each segment
Collaboration:
1. TrafficController Class
2. 
