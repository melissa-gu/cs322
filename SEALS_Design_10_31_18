

Authors: SEALS (Jessica, Melissa, Tracy, Will)

         1         2         3         4         5         6         7         8
12345678901234567890123456789012345678901234567890123456789012345678901234567890

The class name: Setup
Responsibility:
1. Read user input from a file or the command-line
2. Construct an instance of Simulation based on the input
3. Run the Simulation
Collaboration:
1. Simulation Class

The class name: Simulation
Responsibility:
1. Receive message from Setup instance to construct the instance of Simulation
   class
2. Send message to Grid to initialize instance of Grid class with number of 
   Intersections based on constructor parameters
3. Initialize a list of instances of Car class with the following variables for 
   each car:
   3.1 Integer ID representing the instance of Car
   3.2 Integer representing the coordinate of the segment or instance of 
       Intersection the car is in, with the initial value specified by user 
       input
   3.3 Initialize integer representing time left in a segment, 
       timeLeftInSegment, with the initial value of timeToTraverseSegment
   3.4 Initialize integer representing the direction (N,S,W,E) the instance of 
       Car is aiming towards
   3.5 Initialize integer representing the number of blocks the car will travel
       before turning
   3.6 Initialize integer representing direction of turn
4. Send messages to newly initialized cars to enqueue themselves in queues of
   the Intersection instance corresponding to their intersection ID
5. Send messages to instances of Car to update positions of cars and decrement
   the cars' timeToTraverseSegments appropriately at each time-step
6. Send message to Grid instance to update the state of the Intersection
   instances at each time-step
7. Receive messages from instances of Car which says that instance has left the
   instance of Grid. Calculate and output the average time each instance of Car 
   takes to enter and exit the grid based on such messages.
Collaboration:
1. Setup Class
2. Grid Class
2. Car Class

The class name: Grid
Responsibility:
1. Receive message from Simulation instance to construct the instance of Grid
   with information about the number of Intersection instances
2. Initialize 2D array of Intersection instances, sending message to each 
   instance with an integer ID representing the Intersection
3. Initialize an instance of TrafficController for each Intersection with an
   integer ID representing its corresponding Intersection instance
4. Receive message from Simulation instance to update the Intersection instances
   at each time-step by doing (4) below
5. Send message to each TrafficController instance to update the state of its 
   corresponding Intersection at each time-step
Collaboration:
1. Simulation Class
2. Intersection Class
3. TrafficController Class

The class name: Intersection
Responsibility:
1. Receive message from Grid instance with integer ID to construct instance of 
   Intersection class
2. Initialize 2D integer array of size 4 representing the four slots within an 
   intersection that could contain integer car IDs
3. Initialize four integer queues corresponding to four directions that could 
   contain integer car IDs. Each queue represents list of Car instances 
   occupying the segment that aims towards the Intersection instance
4. Receive message from Car instances about direction the Car will proceed
   through the Intersection instance
5. Receive message from TrafficController instance at each time-step to update
   the state of the Intersection. This message could contain information about 
   which Car instance(s) to dequeue (if such a Car instance exists) and how to 
   update Car instances already in the 2D array.
6. Update the state of the Intersection in the following ways:
   6.1 Dequeue cars that can move into the Intersection instance according 
       to the TrafficController message
   6.2 Update the 2D array to reflect the movement of Car instances in the
       Intersection
   6.3 Send message to Car instances that have left the Intersection instance. 
       This message should tell the car which Intersection instance the 
       car is entering next, and also which direction the Car is traveling. If 
       the car is no longer traveling towards an intersection, but is instead 
       exiting the instance of Grid, the intersection ID for the next 
       Intersection instance will be -1.
7. Receive messages from Car instances about which queue to enqueue the Car 
   into, and enqueue that Car instance
Collaboration:
1. Grid Class
2. TrafficController Class
3. Car Class 

The class name: Car
Responsibility:
1. Receive message from Simulation instance containing information about car ID
   and other variables to construct instance of Car class
2. Receive message from Simulation instance at each time unit to decrement 
   timeLeftInSegment value at each time unit
   2.1 When the car's intersection ID is equal to -1 and the timeLeftInSegment 
       value is 0, the Car instance will send a message to the Simulation class 
       that the Car instance has left the Grid instance.
3. Upon initialization, receive message from Simulation instance to enqueue this 
   instance of Car in a queue of the Intersection instance corresponding to
   the intersection ID
4. Upon exiting an Intersection instance, the instance of Car will a receive 
   message from its current Intersection instance about which Intersection ID
   the car is entering next and the direction it is traveling. If 
   the car is no longer traveling towards an intersection, but is instead 
   exiting the instance of Grid, the intersection ID will be -1. The car 
   will update its intersection ID, the variable representing its direction, 
   potentially decrement the integer representing the number of blocks the car 
   will travel before turning, and then do (4) below if the Intersection ID is 
   not -1.
5. Send message to instance of Intersection corresponding to the car's 
   intersection ID to enqueue the car in the correct queue based on the car's 
   direction
Collaboration:
1. Simulation Class
2. Intersection Class

The class name: TrafficController
Responsibility:
1. Receive message from Grid instance containing information about intersection 
   ID to construct instance of TrafficController class
2. Receive message from Grid instance at each time-step to update the 
   Intersection instance corresponding to its Intersection ID
3. Receive message from Intersection instance containing information about which 
   slots of the 2D array are occupied
4. Receive message from Intersection instance containing information about Car 
   instances approaching the Intersection instance
5. Receive messages from Car instances about each Car's direction and whether 
   the car is turning, and from this determine which segment/queue the Car will 
   enter after exiting the Intersection instance
6. Determine which Car instance(s) approaching an Intersection instance can move 
   into the instance based on:
   6.1 Whether the size of the queue to enqueue the Car into after exiting the
       Intersection instance is less than maxSegmentCapacity
   6.2 Rules specified in Requirements document
   6.3 Whether the values of timeLeftInSegment for each Car instance are zero 
7. Send message at each time-step to corresponding Intersection instance that 
   tells that instance to update its state. This message could contain 
   information about which Car instance(s) to dequeue (if such a Car instance 
   exists).
Collaboration:
1. Intersection Class
2. Car Class
3. Grid Class